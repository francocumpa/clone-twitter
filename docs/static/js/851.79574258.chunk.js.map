{"version":3,"file":"static/js/851.79574258.chunk.js","mappings":"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","sources":["hooks/useForm.jsx","components/Login/Login.jsx","gql/user.js","hooks/useAuth.js"],"sourcesContent":["import { handleError } from \"@apollo/client/link/http/parseAndCheckHttpResponse\";\r\nimport { useState } from \"react\";\r\n\r\nexport const useForm = keys => {\r\n    const [form, setForm] = useState({\r\n        values: Object.keys(keys).reduce((container, item) => {\r\n            container = {\r\n                ...container,\r\n                [item]: ''\r\n            }\r\n            return container;\r\n        }, {}),\r\n        touched: Object.keys(keys).reduce((container, item) => {\r\n            container = {\r\n                ...container,\r\n                [item]: false\r\n            }\r\n            return container;\r\n        }, {}),\r\n        errors: Object.keys(keys).reduce((container, item) => {\r\n            container = {\r\n                ...container,\r\n                [item]: true\r\n            }\r\n            return container;\r\n        }, {}),\r\n        initialValues: Object.keys(keys).reduce((container, item) => {\r\n            container = {\r\n                ...container,\r\n                [item]: ''\r\n            }\r\n            return container;\r\n        }, {}),\r\n    });\r\n    return [{\r\n        values: form.values,\r\n        errors: form.errors,\r\n        touched: form.touched,\r\n        handleErrors: Object.keys(form.initialValues).some(key => form.errors[key]),\r\n        handleReset: () => {\r\n            setForm(form => ({\r\n                ...form,\r\n                values: form.initialValues,\r\n                touched: Object.keys(form.touched).reduce((container, item) => {\r\n                    container = {\r\n                        ...container,\r\n                        [item]: false\r\n                    }\r\n                    return container;\r\n                }, {}),\r\n                errors: Object.keys(form.errors).reduce((container, item) => {\r\n                    container = {\r\n                        ...container,\r\n                        [item]: true\r\n                    }\r\n                    return container;\r\n                }, {}),\r\n            }));\r\n        },\r\n        handleTouched: ({ target: { name } }) => {\r\n            setForm(form => ({\r\n                ...form,\r\n                touched: {\r\n                    ...form.touched,\r\n                    [name]: true\r\n                }\r\n            }));\r\n        },\r\n        handleChange: ({ target: { name, value } }) => {\r\n            setForm(form => ({\r\n                ...form,\r\n                values: {\r\n                    ...form.values,\r\n                    [name]: value\r\n                },\r\n                errors: {\r\n                    ...form.errors,\r\n                    [name]: (value || '').length === 0\r\n                },\r\n                touched: {\r\n                    ...form.touched,\r\n                    [name]: true\r\n                }\r\n            }));\r\n        }\r\n    }];\r\n};\r\nexport default useForm;","import { useState } from \"react\";\r\nimport { useMutation } from '@apollo/client'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Grid, Image, Form, Button, Modal, Message, Container } from \"semantic-ui-react\";\r\nimport BgLogin from \"../../assets/img/bgLogin.jpg\";\r\nimport useForm from \"../../hooks/useForm\";\r\nimport { NEW_USER, AUTHENTICATION } from \"../../gql/user\";\r\nimport Storage from \"../../plugins/storage\";\r\nimport useAuth from \"../../hooks/useAuth\";\r\nimport './Login.scss';\r\nconst Login = () => {\r\n    const navigate = useNavigate();\r\n    const { setUser } = useAuth();\r\n    const [addUser] = useMutation(NEW_USER);\r\n    const [logeandome] = useMutation(AUTHENTICATION);\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [message, setMessage] = useState({\r\n        status: null,\r\n        header: null,\r\n        message: null\r\n    });\r\n    const [formLogin] = useForm({ email: '', password: '' });\r\n    const [formLoginRegister] = useForm({ name: '', username: '', email: '', password: '' });\r\n\r\n\r\n    const ShowMessage = () => {\r\n        return message.status === 'SUCCESS' ? (\r\n            <Container textAlign=\"center\">\r\n                <Message\r\n                    compact\r\n                    success\r\n                    header={message.header}\r\n                    content={message.message}\r\n                />\r\n            </Container>) : message.status === 'ERROR' ? (\r\n                <Container textAlign=\"center\">\r\n                    <Message\r\n                        compact\r\n                        error\r\n                        header={message.header}\r\n                        content={message.message}\r\n                    />\r\n                </Container>) : null\r\n    }\r\n    console.log(formLogin);\r\n    //const [formLogin, setFormLogin] = useState();\r\n    const handleClickOpen = () => {\r\n        setOpen(!open);\r\n    }\r\n    // const handleChange = ({ target: { name, value } }) => {\r\n    //     console.log(name, value)\r\n    //     //setFormLogin(formLogin => ({ ...formLogin, [name]: value }));\r\n    // }\r\n    const handleClickLogin = async (e) => {\r\n        e.preventDefault();\r\n        if (formLogin.handleErrors) {\r\n            console.log('error')\r\n            setMessage({\r\n                status: 'ERROR',\r\n                header: 'Faltan campos por llenar',\r\n                message: 'El campo email o contrasenia se encuentran vacios'\r\n            });\r\n        } else {\r\n            try {\r\n                const response = await logeandome({\r\n                    variables: {\r\n                        input: formLogin.values\r\n                    }\r\n                })\r\n                const { data: { authentication: { token } } } = response;\r\n                Storage.set('token', token);\r\n                setUser(token);\r\n                navigate('/home')\r\n                console.log(token);\r\n                console.log('all good');\r\n                setMessage({\r\n                    status: 'SUCCESS',\r\n                    header: 'Datos llenados exitosamente',\r\n                    message: 'Espere unos segundos por favor'\r\n                })\r\n            } catch (error) {\r\n                setMessage({\r\n                    status: 'ERROR',\r\n                    header: 'Ocurrio un error',\r\n                    message: error.message\r\n                });\r\n\r\n            }\r\n        }\r\n    }\r\n    const handleClickRegister = async (e) => {\r\n        e.preventDefault();\r\n        if (formLoginRegister.handleErrors) {\r\n            console.log('error')\r\n            setMessage({\r\n                status: 'ERROR',\r\n                header: 'Faltan campos por llenar',\r\n                message: 'El campo email o contrasenia se encuentran vacios'\r\n            });\r\n        } else {\r\n            try {\r\n                const response = await addUser({\r\n                    variables: {\r\n                        input: formLoginRegister.values,\r\n\r\n                    }\r\n                });\r\n                handleClickOpen();\r\n                formLoginRegister.handleReset();\r\n                console.log('all good')\r\n                setMessage({\r\n                    status: 'SUCCESS',\r\n                    header: 'Datos llenados exitosamente',\r\n                    message: 'Espere unos segundos por favor ...'\r\n                })\r\n            } catch (error) {\r\n                setMessage({\r\n                    status: 'ERROR',\r\n                    header: 'Ocurrio un error',\r\n                    message: error.message\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Grid columns={2} className=\"login\">\r\n                <Grid.Row>\r\n                    <Grid.Column>\r\n                        <Image src={BgLogin} className=\"img\"></Image>\r\n                    </Grid.Column>\r\n                    <Grid.Column verticalAlign=\"middle\">\r\n                        <ShowMessage />\r\n                        <Form onSubmit={handleClickLogin}>\r\n                            <Form.Field className=\"\">\r\n                                <Form.Input name=\"email\"\r\n                                    label='Email' placeholder='Email'\r\n                                    onBlur={formLogin.handleTouched}\r\n                                    onChange={formLogin.handleChange}\r\n                                    value={formLogin.values.email}\r\n                                    error={\r\n                                        formLogin.touched.email &&\r\n                                            formLogin.errors.email ?\r\n                                            { content: 'tu correo esta mal escrito', pointing: 'below' } : null\r\n                                    }></Form.Input>\r\n\r\n                            </Form.Field>\r\n                            <Form.Field className=\"\">\r\n                                <Form.Input name=\"password\"\r\n                                    onBlur={formLogin.handleTouched}\r\n                                    onChange={formLogin.handleChange}\r\n                                    value={formLogin.password}\r\n                                    label='Password' placeholder='Password'\r\n                                    type=\"password\"\r\n                                    error={\r\n                                        formLogin.touched.password &&\r\n\r\n                                            formLogin.errors.password ?\r\n                                            { content: 'tu password esta mal escrito', pointing: 'below' } : null\r\n                                    }></Form.Input>\r\n\r\n                            </Form.Field>\r\n                            <Button primary floated=\"left\">Ingresar</Button>\r\n                            <Button secondary floated=\"right\" onClick={handleClickOpen}>Registrarme</Button>\r\n\r\n                        </Form>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n            <Modal\r\n                closeOnEscape={false}\r\n                closeOnDimmerClick={true}\r\n                open={open}\r\n                size=\"mini\">\r\n                <Modal.Header>Registrar un nuevo usuario</Modal.Header>\r\n                <Modal.Content>\r\n                    <ShowMessage />\r\n                    <Form onSubmit={handleClickRegister}>\r\n                        <Form.Field>\r\n                            <Form.Input name=\"name\"\r\n                                label='Nombre'\r\n                                onBlur={formLoginRegister.handleTouched}\r\n                                onChange={formLoginRegister.handleChange}\r\n                                value={formLoginRegister.values.name}\r\n                                error={\r\n                                    formLogin.touched.name &&\r\n\r\n                                        formLoginRegister.errors.name ?\r\n                                        { content: 'tu correo esta mal escrito', pointing: 'below' } : null\r\n                                }\r\n                                placeholder='Nombre'></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Form.Input name=\"username\"\r\n                                label='Username'\r\n                                onBlur={formLoginRegister.handleTouched}\r\n                                onChange={formLoginRegister.handleChange}\r\n                                value={formLoginRegister.values.username}\r\n                                error={\r\n                                    formLogin.touched.username &&\r\n\r\n                                        formLoginRegister.errors.username ?\r\n                                        { content: 'tu correo esta mal escrito', pointing: 'below' } : null\r\n                                }\r\n                                placeholder='Username'></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Form.Input name=\"email\"\r\n                                label='Email'\r\n                                onBlur={formLoginRegister.handleTouched}\r\n                                onChange={formLoginRegister.handleChange}\r\n                                value={formLoginRegister.values.email}\r\n                                error={\r\n                                    formLogin.touched.email &&\r\n                                        formLoginRegister.errors.email ?\r\n                                        { content: 'tu correo esta mal escrito', pointing: 'below' } : null\r\n                                }\r\n                                placeholder='Email'></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Form.Input name=\"password\"\r\n                                label='Password'\r\n                                onBlur={formLoginRegister.handleTouched}\r\n                                onChange={formLoginRegister.handleChange}\r\n                                value={formLoginRegister.values.password}\r\n                                error={\r\n                                    formLogin.touched.password &&\r\n                                        formLoginRegister.errors.password ?\r\n                                        { content: 'tu correo esta mal escrito', pointing: 'below' } : null\r\n                                }\r\n                                placeholder='Password'\r\n                                type=\"password\"></Form.Input>\r\n                        </Form.Field>\r\n\r\n                        <Modal.Actions>\r\n                            <Button secondary onClick={() => handleClickOpen()}>Cancelar</Button>\r\n                            <Button primary type=\"submit\">Registrar</Button>\r\n\r\n                        </Modal.Actions>\r\n                    </Form>\r\n\r\n                </Modal.Content>\r\n\r\n            </Modal>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Login;","import { gql } from '@apollo/client'\r\n\r\nexport const NEW_USER = gql`\r\nmutation addUser($input: UserInput) {\r\nnewUser(input: $input) {\r\npassword\r\nusername\r\n}}`;\r\n\r\nexport const AUTHENTICATION = gql`\r\nmutation logeandome($input: LoginInput) {\r\n  authentication (input: $input) {\r\n    token\r\n}}`;\r\n\r\nexport const UPDATE_AVATAR = gql`\r\nmutation updateAvatar($input: AvatarInput) {\r\n  updateAvatar(input: $input) {\r\n    id\r\n}}`;","import { useContext } from \"react\";\r\nimport AuthContext from \"../context/AuthContext\";\r\n\r\nexport default () => useContext(AuthContext);"],"names":["keys","form","setForm","useState","values","Object","reduce","container","item","touched","errors","initialValues","handleErrors","some","key","handleReset","handleTouched","_ref","target","name","handleChange","_ref2","value","length","Login","navigate","useNavigate","setUser","useAuth","addUser","useMutation","NEW_USER","logeandome","AUTHENTICATION","open","setOpen","message","setMessage","status","header","formLogin","useForm","email","password","formLoginRegister","username","ShowMessage","_jsx","Container","textAlign","children","Message","compact","success","content","error","console","log","handleClickOpen","_jsxs","_Fragment","Grid","columns","className","Row","Column","Image","src","BgLogin","verticalAlign","Form","onSubmit","async","e","preventDefault","response","variables","input","data","authentication","token","Storage","set","Field","Input","label","placeholder","onBlur","onChange","pointing","type","Button","primary","floated","secondary","onClick","Modal","closeOnEscape","closeOnDimmerClick","size","Header","Content","Actions","gql","_templateObject","_taggedTemplateLiteral","_templateObject2","UPDATE_AVATAR","_templateObject3","useContext","AuthContext"],"sourceRoot":""}